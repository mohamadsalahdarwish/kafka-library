kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  common:
    key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
    compression-type: snappy
    acks: all
    batch-size: 16384
    batch-size-boost-factor: 100
    linger-ms: 5
    request-timeout-ms: 60000
    retry-count: 5
  avro:
    value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  json:
    value-serializer-class: org.springframework.kafka.support.serializer.JsonSerializer

kafka-consumer-config:
  common:
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    auto-offset-reset: earliest
    batch-listener: true
    auto-startup: true
    session-timeout-ms: 10000
    heartbeat-interval-ms: 3000
    max-poll-interval-ms: 300000
    max-poll-records: 500
    max-partition-fetch-bytes-default: 1048576
    max-partition-fetch-bytes-boost-factor: 1
    poll-timeout-ms: 150
    concurrency-level: 3  # Common concurrency level
  consumer-groups:
    order:
      consumer-group-id: order-topic-consumer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      specific-avro-reader-key: specific.avro.reader
      specific-avro-reader: true
      topic-id: order-topic
      # Inherits concurrency-level from common (3)
    payment:
      consumer-group-id: payment-topic-consumer
      # Inherits value-deserializer from common (JsonDeserializer)
      concurrency-level: 2  # Overrides concurrency-level
